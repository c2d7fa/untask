#+HTML_HEAD: <style>body { max-width: 80ex; margin: auto; font: 1.15em sans-serif; }</style>
#+TITLE: Documentation
* Selections and filters
Some subset of all the items in the database is called a *selection*. Selections
are usually constructed by using *filters*.

TWD commands always act on the current selection. A command in TWD takes the
form
#+BEGIN_EXAMPLE
> [filter] [command] [arguments]
#+END_EXAMPLE
where =[filter]= is a filter that changes the selection, =[command]= is the name
of a command that will act on that selection, and =[arguments]= may be a list of
arguments given to the command.

The command /list/ simply lists all of the items in the current selection; it
does not take arguments. If no command is specified, /list/ is the default. This
means that typing a filter on the command line will list all items in the
database matching that filter.
** List of filter properties
*** Global ID (=id=)
*Type:* text\\

The simplest possible filter simply specifies the global ID of a single task;
for example, the task with global ID /a4/ is written =id:{a4}=:
#+BEGIN_EXAMPLE
> id:a4
 # | ID | Desc
---+----+---------------
 1 | 4v | Do the dishes
#+END_EXAMPLE
*** Description (=description=)
*Type:* text\\

This is the default property; when no property is specified, /description/ is
assumed. For example, to list all items whose description contains "buy":
#+BEGIN_EXAMPLE
> /buy
  | Description
--+------------------
1 | Buy milk
2 | Buy chocolate
3 | Decide which car to buy
#+END_EXAMPLE
(This command is equivalent to =desc/{buy} list=.)
Note that simply typing =example= will not list all items whose description
exactly matches "example", because this could be confused with the name of a
command; instead, use either ={example}= or =:example= to abbreviate
=description:{example}=.
*** All tags (=tags=)
*Type:* set of text\\

(Missing documentation.)
*** Any tag (=tag=)
*Type:* text\\

(Missing documentation.)
*** Active (=active=)
*Type:* boolean\\

This property is on if the item is active (meaning it can be completed) and off
if it is inactive.
** Filter property types
Each filter property has a type. The types are /text/, /date/, /number/, /item/
and /set/. Each type supports various prediates.
*** Text
Note that all of the text predicates are case insensitive by default.

*Supported prediates:*
| Operation         | Example            | Meaning                                     |
|-------------------+--------------------+---------------------------------------------|
| =:= (is)          | =prop:{value}=     | =prop= is exactly "=value="                 |
| =/= (contains)    | =prop/{substring}= | =prop= contains "=substring="               |
| =<= (starts with) | =prop<{prefix}=    | =prop= starts with "=prefix="               |
| =>= (ends with)   | =prop>{suffix}=    | =prop= ends with "=suffix="                 |
| =~= (matches)     | =prop~{regex}=     | =prop= matches regular expression "=regex=" |
*** Boolean
*Supported prediates:*
| Operation    | Example | Meaning       |
|--------------+---------+---------------|
| =+= (has)    | =+prop= | =prop= is on  |
| =-= (hasn't) | =-prop= | =prop= is off |
*** Date
(Missing documentation.)
*** Number
(Missing documentation.)
*** Item
(Missing documentation.)
*** Set
(Missing documentation.)
** Filter operators
Filter operators can be used to modify and compose filters. Operators can be
unary or binary.
*** Unary operators
Most unary operators are written as =filter .operator=. Note
that parentheses can be used to specify how the operator binds to its argument,
and that spacing influences this as well. For example, the following commands
are equivalent:
#+BEGIN_EXAMPLE
> ((!#a, !#b).dep).not, #c
> !#a, !#b .dep.not, #c
#+END_EXAMPLE
Some unary operators can be written using prefix syntax. For example, =A.not=
can also be written =!A=.
**** Invert (=not=)
*Arity:* unary\\
*Alias:* =!= (prefix)\\

This operator inverts the filter argument; that is, it selects all items that do
not match the filter. For example, the equivalent commands
#+BEGIN_EXAMPLE
> #cleaning (/wash, /wash.blocks).not
#+END_EXAMPLE
shows all items that are tagged with "cleaning", but which do not contain the
word "wash" or are blocking a task containing the word "wash". The same command
can be written using the prefix form of the =not= operator, which is called =!=:
#+BEGIN_EXAMPLE
> #cleaning !(/wash, /wash.b)
#+END_EXAMPLE
**** Dependencies (=depends=)
*Arity:* unary\\
*Alias:* =dep=, =d=\\

The operation /depends/ gives all the items that are (directly) dependent on any
of the items matching a given filter. It is the opposite operation of /blocks/.

For example, the following command adds the tag "maybe" to dependencies of tasks
that are already tagged "maybe":
#+BEGIN_EXAMPLE
> #maybe .dep mod #maybe
#+END_EXAMPLE
**** Blocking (=blocks=)
*Arity:* unary\\
*Alias*: =blo=, =b=\\

The operation /blocks/ gives all the items that are (directly) blocking any of
the items matching a given filter. It is the opposite operation of /depends/.

For example, the following command adds the tag "soon" to the tasks that are
blocking a task that is either tagged with "design" or which begin with the word
"consider":
#+BEGIN_EXAMPLE
> #design, <consider .blo mod #soon
#+END_EXAMPLE
*** Binary operators
Binary operators are written in infix notation.
**** Intersection (space)
*Arity:* binary\\
*Alias:* --- \\

When two filters are written next to each other with spaces between them, this
operator is used to combine the two filters.

The result of =A B= is the set of items that match both filters =A= and =B=. For
example, the following returns all items that are tagged "reading", but which
are not tagged "research":
#+BEGIN_EXAMPLE
> #reading !#research
#+END_EXAMPLE
**** Union (=,=)
*Arity:* binary\\
*Alias:* --- \\

The result of =A, B= is the set of items that match the filter =A= /or/ the
filter =B=. For example, the following command lists all items which depend on
an item that is either active or tagged as "soon":
#+BEGIN_EXAMPLE
> (+active, #soon).depends
#+END_EXAMPLE
** Default filter
* Commands
** List selection (=list=)
This is the default command.
** Modify selection (=modify=)
(Missing documentation.)
*** Arguments
(Missing documentation.)
