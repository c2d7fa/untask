#+HTML_HEAD: <style>body { max-width: 80ex; margin: auto; font: 1.15em sans-serif; }</style>
#+TITLE: Untask 0.2

This file contains notes about what has changed in version 0.2 of Untask as
compared to version 0.1.

* Contexts
When working on a particular project or at a particular location, you may find
yourself often typing the same command arguments again and again. For example,
if you are stranded somewhere without an internet connection and are working on
your novel, you probably only want to show tasks having to do with that novel --
and you don't want to see tasks that need an internet connection. That may look
something like this:
#+BEGIN_EXAMPLE
> tags+novel tags-internet tags-research list
#+END_EXAMPLE
Having to type that filter expression over and over again is annoying, so you
can create a /context/ called, say, =novel=:
#+BEGIN_EXAMPLE
> context add novel filter tags+novel tags-internet tags-research
#+END_EXAMPLE
Then, use the context, by prefixing the context name with =@=:
#+BEGIN_EXAMPLE
> @novel
@novel>
#+END_EXAMPLE
Now, any command you type will automatically use that filter expression. You can
also set a modify expression:
#+BEGIN_EXAMPLE
> context add novel filter tags+novel tags-internet tags-research modify tags+novel
> @novel
@novel> add tags+research description:{Figure out how long it would take to travel from Germany to Italy in 1750}
#+END_EXAMPLE
To deactivate a this context, use the command =-@novel=. It is possible to
activate or deactivate a particular context for just a single command by simply
starting that command with =@context= or =-@context=:
#+BEGIN_EXAMPLE
@novel> -@novel add tags+groceries description:{Buy milk}
@novel>
#+END_EXAMPLE
** The =context= command
The context command takes x different subcommands:
#+BEGIN_EXAMPLE
context list
context add <name> [filter <filter expression>] [modify <modify expression>]
context remove <name>
#+END_EXAMPLE

The =list= subcommand simply lists all available contexts.

To add a new context or redefine an existing context, use =add=. A context must
have a name and may take a filter expression and a modify expression.

To remove a context, use =remove=.
* Type checking
Version 0.2 no longer crashes when the user passes a value of an incorrect type
to a command. For example,
#+BEGIN_EXAMPLE
> add depends+1
Error: Invalid argument type for set of type string: Expected type string but got item.
#+END_EXAMPLE

** Implementation
To implement this, we associate types to properties, operators and values. We
use a somewhat messy system, with different representations of types in
different places. The basic types are:

- =any=, which matches any type;
- =string=, =number= and =item=, representing atomic values;
- =(set x)= where /x/ is a type, which represents a set containing values of
  type /x/.

These types are used in properties, which contain an attribute that holds the
type expected by that property. Any value will have a non-=any= type, which can
be found with =get-type=.

Operators have two attributes having to do with types: When looking up which
operator to pick for an expression, =operator-object-type= is used; this field
contains either the type of an atomic value or the symbol =set=, which indicates
that the operator should be picked when the object is a set, no matter what type
the contents of the set have.

A different method is used for checking the types of operator arguments: To each
operator is associated a function that can be evaluated with the types of the
operator object and arguments as values to determine whether a particular set of
argument types are valid. This allows us to place more complex constraints on
the arguments of operators; for example, the =+= operator on sets checks that
the argument is of the type that the object set contains.

* Opening files

Version 0.2 replaces =save= and =load= with a more traditional system for
managing files. The new =open= command takes a filename as an argument, which is
then set as the open file; future invocations of =save= will save data to that
file. The new syntax is:
#+BEGIN_EXAMPLE
open <filename>
save
#+END_EXAMPLE
It is no longer possible to =load= a file -- this functionality is replaced by
=open=.

* Removing items

Version 0.2 adds the =remove= command, which is used to remove items. The syntax
is:
#+BEGIN_EXAMPLE
<filter> remove
#+END_EXAMPLE
which will remove the items matching /<filter>/.

* Detailed item information

Version 0.2 adds the =info= command, which is used to get detailed information
about item. The command
#+BEGIN_EXAMPLE
<filter> info
#+END_EXAMPLE
will display information including dependencies and blocked items of each item
matching /<filter>/. When =list= is called with a filter expression that matches
exactly one item, it instead uses the output of =info=.
