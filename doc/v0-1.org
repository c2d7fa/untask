#+HTML_HEAD: <style>body { max-width: 80ex; margin: auto; font: 1.15em sans-serif; }</style>
#+TITLE: Notes on Version 0.1

This file contains some temporary implementation notes about what we need to
implement next. Eventually, the text here should be merged into the main
documentation or be deleted. This document essentially describes a boiled-down
version of the main program that we can implement in the near future.

* Syntax
Every command in version 0.1 has the form:
#+BEGIN_EXAMPLE
[filter] [command] [arguments]
#+END_EXAMPLE
where =[filter]= is a filter expression and =[command]= is the name of a
command; the meaning of =[arguments]= depends on the given command. There are
three commands: =list=, =modify= and =add=.
** Filter expressions
A filter expression consists of a comma-separated lists of subexpressions. A
filter expression matches an item if any of the subexpressions do. Each
subexpression is a space-separated list of pairs of the form:
#+BEGIN_EXAMPLE
[key][op][value]
#+END_EXAMPLE
The subexpression matches if each pair does. In the pair, =[key]= must be a
valid property key. The meaning of =[op]= depends on the property type; see
below. The =[value]= must be a value expression of the correct type; see the
relevant section.

An expression or subexpression may be placed inside a parenthesis.  Finally, any
expression, subexpression or pair may be prefixed with =!=; in this case the
meaning of the expression is inverted.

For some ID =123=, the filter expression =id:123= can be abbreviated as simply
=123=. If no =[key]= is given, =description= is assumed; if neither =[key]= nor
=[op]= is given, =description/= is assumed.

The operators on *string* are as follows:
| Operator | Argument Type | Meaning                           |
|----------+---------------+-----------------------------------|
| =:=      | string        | String matches exactly            |
| =/=      | string        | String contains substring         |
| =<=      | string        | String starts with prefix         |
| =>=      | string        | String ends with suffix           |

For any type /t/, the oprators on a */t/ set* are as follows:
| Operator | Argument Type | Meaning                                  |
|----------+---------------+------------------------------------------|
| =+=      | /t/           | Set contains element                     |
| =-=      | /t/           | Set does not contain element             |
** Modify expressions
The syntax for modify expressions mimics that of a filter expression, but the
operators and their meanings are different.

The operators on *string* are as follows:
| Operator | Argument Type | Meaning                  |
|----------+---------------+--------------------------|
| =:=      | string        | Set value of string      |
| =<=      | string        | Prepend prefix to string |
| =>=      | string        | Append suffix to string  |

For any type /t/, the oprators on a */t/ set* are as follows:
| Operator | Argument Type | Meaning                |
|----------+---------------+------------------------|
| =+=      | /t/           | Add new value to set   |
| =-=      | /t/           | Remove value from set  |
** Values
*Items.* An item is referred to by its ID. For exmaple, =2 mod depends+3= adds
the item with ID 3 to the dependencies of the item with ID 2.

*Strings.* A string is placed inside curly braces like so: ={string
body}=. Matching curly braces are automatically escaped. To escape an unmatched
closing brace, write it twice. If a string contains only lower-case characters
and dashes, it can be written as a bare string, e.g. =this-is-a-string=.

*Numbers.* Number literals begin with the character =$=.

*Sets.* A set is written as a comma-separated list of its values, enclosed in
square brackets. For example, a set containing integers between 1 and 3 would be
written =[$1, $2, $3]=.
** Commands
There are five commands: =list=, =add=, =modify=, =save= and =load=.

The =list= command is the default. It is invoked with one of the
following three forms:
#+BEGIN_EXAMPLE
[filter] list
[filter]
list
#+END_EXAMPLE
where =[filter]= is a filter expression. It prints a listing of all
the items matching the given filter expression (or, if no filter is
given, a list of all items in the database).

The =modify= and =add= commands are invoked as
#+BEGIN_EXAMPLE
[filter] modify [modify]
#+END_EXAMPLE
(where =[filter]= is a filter expression an
d =[modify]= is a modify
expression) and
#+BEGIN_EXAMPLE
add [modify]
#+END_EXAMPLE
(where =[modify]= is a modify expression), respectively. The =modify=
command modifies the properties of each item matched by the filter
expression according to the given modify expression. The =add= command
creates a new item with properties given by the modify expression.

The =save= and =load= commands are used to export and import items
respectively. They are invoked as such:
#+BEGIN_EXAMPLE
[filter] save [file]
[filter] load [file]
#+END_EXAMPLE
In each case, the filter is optional The =save= commands saves all of
the items matching =[filter]= (or, if no filter is given, all items)
to the given file. The =load= command loads all items matching the
given filter from the given file.
* Properties
The following table lists all valid properties. Properties that are marked as
/read-only/ cannot be modified directly.
| Key           | Modifable  | Type       | Description                                |
|---------------+------------+------------+--------------------------------------------|
| =id=          | Modifiable | string     | Unique global ID                           |
| =description= | Modifiable | string     | Description of item                        |
| =tags=        | Modifiable | string set | List of tags                               |
| =depends=     | Modifiable | item set   | Items that the item depends on             |
| =blocks=      | Modifabile | item set   | Items that depend on the item              |
| =basestatus=  | Modifiable | string     | Manually set status (active/inactive/done) |
| =status=      | Read-only  | string     | Calculated status (active/inactive/done)   |
| =baseurgency= | Modifiable | number     | Manually set urgency                       |
| =urgency=     | Read-only  | number     | Calculated urgency                         |
* Implementation
TWD stores the current program state in a boxed variable, which is
updated based on the user's input. The program state contains a
mapping /(item, property key) \rightarrow value/, where:
- /item/ is represented as a number, which is the ID of the item;
- /property key/ is a symbol; and
- /value/ is a value, represented in the manner described below.
** Expressions and values
When TWD parses a command line, it generates an
*expression*. Expressions are simple types whose representation does
not depend on any context (state).

When expressions are evaluated, the result is a *value*. Types of
values include the following:
- /strings/, represented as =`(string . "string content")=;
- /numbers/, represented as =`(number . -2.5)=;
- /items/, represented as =`(item . 62)=;
- /sets/, represented as =`(set . ,(set '(item . 1) '(item . 2) '(item . 3)))=.

* List of unimplemented features
Tasks that we need to finish before version 0.1:

- Use active and inactive status
  - Add a way of marking tasks as finished or unfinished
  - Allow user to show only active tasks
  - Calculate active status from dependencies
- Implement "read-only" properties /status/ and /urgency/
- Implement =save= and =load= commands
- Implement special property /blocks/
