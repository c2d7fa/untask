#+HTML_HEAD: <style>body { max-width: 80ex; margin: auto; font: 1.15em sans-serif; }</style>
#+TITLE: Untask 0.3

This file describes the changes between version 0.2 and version 0.3 of Untask.

* Enabling context for single command

In version 0.3, it is possible to enable a context for just a single
command. For example, to use the context "example" while adding an item without
enabling that context, enter this command:
#+BEGIN_EXAMPLE
> @example add {This item has the properties associated with @example.}
>
#+END_EXAMPLE
Additionally, the syntax =@= can be used to disable all contexts, either for a
single command or in general:
#+BEGIN_EXAMPLE
@a @b @c> @ add {This item has no contexts enabled.}
@a @b @c> @ @d
@d> add {This item has the @d context enabled.}
#+END_EXAMPLE

* Working with dates

Version 0.3 of Untask introduces dates.

Dates are written on the form =2000-12-31T23:59=, with the time part being
optional (so =2000-12-31= is also valid). If the year is omitted, the current
year is assumed. Optionally, the month can be written as a three-letter
abbreviation with the first letter capitalized. Thus, =2000-Dec-31= and
=Dec-31T23:59= are also valid dates.

Dates are used in the /wait/ and /date/ properties. The /wait/ property should
contain the first time at which the task can be done; until this time, the task
is automatically marked as inactive. The /date/ property is used in the agenda
view (see below) and for formatting items as overdue or due today.

This version also introduces a new command, /agneda/. This command is used to
print a view of the upcoming tasks, as indicated by their due dates. It prints a
daily agenda containing all items that are due on a particular day. Like /list/,
/agenda/ can be used with a filter expression to narrow the kinds of items that
are included.

* Visualizing dependency tress

Sometimes it may not be obvious how different tasks depend on each other. In
particular, it can be difficult to find out which tasks one would need to
complete in order to be able to start on a particular task.

Version 0.3 adds the /tree/ command which will print out the dependency tree for
a particular task (or set of tasks).

For example:

#+BEGIN_EXAMPLE
> 23 tree
- 23. Win the Nobel Prize in Physics 1.0 D:2
  - 37. Get a PhD in physics 1.0 D:3
    - 60. Get a Master's in physics 1.5 B:1
      - 42. Read a book about physics 2.0 D:1 B:2
        - 43. Find a good book about physics 2.0 B:1
  - 42. Read a book about physics 2.0 D:1 B:2
    - 43. Find a good book about physics 2.0 B:1
#+END_EXAMPLE

The /tree/ command optionally takes a second filter expression as it's right
argument. When such an argument is provided, it is used to filter the children
of the tree. For example, the command =23 tree !status:done= recursively
displays all dependencies of item 23, omitting any dependencies that have
already been completed.
